What does 'loose coupling' mean?+a)Units inside a program are heavily depending on each other.+b)Two methods of the same class use the same attribute.+c)Units inside a program do not share many links.+d)Strange, I can't remember...%c%Very good, you are not as bad as I expected%No, it means that Units inside a program do not share many links. That's what you should aim for in programming.
Which of these is not a primitive data type in Java?+a)float.+b)boolean.+c)long.+d)String.%d%Very good, you are not as bad as I expected.%No, String would be the right answer. It's a class!   
What does 'Encapsulation' achieve?+a)Programs written in Java can be executed on different operating systems.+b)Control and security: attributes can be made read/write only.+c)Classes inside a program do not share many links.+d)It allows for one class to use fields and methods of super classes.%b%That is right! You are an expert!%Encapsulated variables are hidden data ('private' or 'protected' keywords). You can only access/mutate if you add some extra methods to your class!
What does 'Inheritance' achieve?+a)It allows for one class to use fields and methods of super classes.+b)Control and security: attributes can be made read/write only.+c)Classes of the same package have access to each other's fields.+d)Strange, I can't remember...%a%Perfect! You are an expert.%Wrong, it's a! Classes are structured in a hierachy,  and sub-classes can use or overwrite functionalities from super-classes.
What is the point of abstraction?+a)It's the ability on an object to take the form of another object.+b)It allows for one class to use fields and methods of super classes.+c)Control and security: attributes can be made read/write only.+d)The user sees the functionalities of a class, but not the details of the implementation.%d%That is right!%No. D is the right answer!
What does 'Polymorphism mean'?+a)Two methods of the same class use the same attribute.+b)It's the ability on an object to take the form of another object.+c)Two variables can point to the same object.+d)Programs written in Java can be executed on different operating systems.%b%True! Very good.%No, b would be the right answer. It means that e.g. a child class can use a reference to a parent class.
How would you initialise an ArrayList that contains Strings?+a)ArrayList<String> list = new ArrayList<String>;+b)wordList = new List<StringArray>();+c)wordList = [];+d)ArrayList<String> wordList = new ArrayList<String>();.%d%Excellent!%Take a closer look. It's 'ArrayList<String> list = new ArrayList<String>();'
This%problematic line does not have enouth tokens!
How would you change the value of a private attribute from outside?+a)Define and call an accessor method.+b)Change it in its parent class.+c)Define and call a mutator method.+d)The only way is to declare it as public.%c%Nice!%Almost...To change its value you can add a mutator method! 
Which of the following is not a valid structure  for a loop?+a) for(int i = 10;i > 0; i--){...}.+b) while(someInt >0 && simpleBoolean = false){...}.+c)for (String a : someStringArray){...}.+d) while(!someBoolean){...}.%b%It is impossible to fool you!% No. B is wrong, to compare boolean, one would use '==', or even the '!' operator.
This%%problematic %%line% has% too% many